"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var currencyActions = require("../actions");
var initialState = {
    loading: false,
    data: [
        {
            id: 'bitcoin',
            name: 'Bitcoin',
            symbol: 'BTC',
            rank: '1',
            price_usd: '18482.5',
            price_btc: '1.0',
            '24h_volume_usd': '10659900000.0',
            market_cap_usd: '309489462500',
            available_supply: '16745000.0',
            total_supply: '16745000.0',
            max_supply: '21000000.0',
            percent_change_1h: '1.84',
            percent_change_24h: '2.95',
            percent_change_7d: '22.12',
            last_updated: '1513431252',
        },
    ],
};
function reducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case currencyActions.LOAD_CURRENCY: {
            return __assign({ loading: true }, state);
        }
        case currencyActions.LOAD_CURRENCY_SUCCESS: {
            return __assign({}, state, { loading: false, data: action.payload });
        }
        case currencyActions.LOAD_CURRENCY_FAIL: {
            return __assign({ loading: false }, state);
        }
        default: {
            return state;
        }
    }
}
exports.reducer = reducer;
exports.getCurrencies = function (state) { return state.data; };
exports.getCurrenciesLoading = function (state) { return state.loading; };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVuY3kucmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImN1cnJlbmN5LnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw0Q0FBOEM7QUFPOUMsSUFBTSxZQUFZLEdBQVU7SUFDMUIsT0FBTyxFQUFFLEtBQUs7SUFDZCxJQUFJLEVBQUU7UUFDSjtZQUNFLEVBQUUsRUFBRSxTQUFTO1lBQ2IsSUFBSSxFQUFFLFNBQVM7WUFDZixNQUFNLEVBQUUsS0FBSztZQUNiLElBQUksRUFBRSxHQUFHO1lBQ1QsU0FBUyxFQUFFLFNBQVM7WUFDcEIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsZ0JBQWdCLEVBQUUsZUFBZTtZQUNqQyxjQUFjLEVBQUUsY0FBYztZQUM5QixnQkFBZ0IsRUFBRSxZQUFZO1lBQzlCLFlBQVksRUFBRSxZQUFZO1lBQzFCLFVBQVUsRUFBRSxZQUFZO1lBQ3hCLGlCQUFpQixFQUFFLE1BQU07WUFDekIsa0JBQWtCLEVBQUUsTUFBTTtZQUMxQixpQkFBaUIsRUFBRSxPQUFPO1lBQzFCLFlBQVksRUFBRSxZQUFZO1NBQzNCO0tBQ0Y7Q0FDRixDQUFDO0FBRUYsaUJBQ0UsS0FBb0IsRUFDcEIsTUFBK0I7SUFEL0Isc0JBQUEsRUFBQSxvQkFBb0I7SUFHcEIsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEIsS0FBSyxlQUFlLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDbkMsTUFBTSxZQUNKLE9BQU8sRUFBRSxJQUFJLElBQ1YsS0FBSyxFQUNSO1FBQ0osQ0FBQztRQUVELEtBQUssZUFBZSxDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFDM0MsTUFBTSxjQUNELEtBQUssSUFDUixPQUFPLEVBQUUsS0FBSyxFQUNkLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTyxJQUNwQjtRQUNKLENBQUM7UUFDRCxLQUFLLGVBQWUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQ3hDLE1BQU0sWUFDSixPQUFPLEVBQUUsS0FBSyxJQUNYLEtBQUssRUFDUjtRQUNKLENBQUM7UUFDRCxTQUFTLENBQUM7WUFDUixNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2YsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBN0JELDBCQTZCQztBQUVZLFFBQUEsYUFBYSxHQUFHLFVBQUMsS0FBWSxJQUFLLE9BQUEsS0FBSyxDQUFDLElBQUksRUFBVixDQUFVLENBQUM7QUFDN0MsUUFBQSxvQkFBb0IsR0FBRyxVQUFDLEtBQVksSUFBSyxPQUFBLEtBQUssQ0FBQyxPQUFPLEVBQWIsQ0FBYSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3VycmVuY3kgfSBmcm9tICcuLi9tb2RlbHMvY3VycmVuY3kubW9kZWwnO1xuaW1wb3J0ICogYXMgY3VycmVuY3lBY3Rpb25zIGZyb20gJy4uL2FjdGlvbnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlIHtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgZGF0YTogQ3VycmVuY3lbXTtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlOiBTdGF0ZSA9IHtcbiAgbG9hZGluZzogZmFsc2UsXG4gIGRhdGE6IFtcbiAgICB7XG4gICAgICBpZDogJ2JpdGNvaW4nLFxuICAgICAgbmFtZTogJ0JpdGNvaW4nLFxuICAgICAgc3ltYm9sOiAnQlRDJyxcbiAgICAgIHJhbms6ICcxJyxcbiAgICAgIHByaWNlX3VzZDogJzE4NDgyLjUnLFxuICAgICAgcHJpY2VfYnRjOiAnMS4wJyxcbiAgICAgICcyNGhfdm9sdW1lX3VzZCc6ICcxMDY1OTkwMDAwMC4wJyxcbiAgICAgIG1hcmtldF9jYXBfdXNkOiAnMzA5NDg5NDYyNTAwJyxcbiAgICAgIGF2YWlsYWJsZV9zdXBwbHk6ICcxNjc0NTAwMC4wJyxcbiAgICAgIHRvdGFsX3N1cHBseTogJzE2NzQ1MDAwLjAnLFxuICAgICAgbWF4X3N1cHBseTogJzIxMDAwMDAwLjAnLFxuICAgICAgcGVyY2VudF9jaGFuZ2VfMWg6ICcxLjg0JyxcbiAgICAgIHBlcmNlbnRfY2hhbmdlXzI0aDogJzIuOTUnLFxuICAgICAgcGVyY2VudF9jaGFuZ2VfN2Q6ICcyMi4xMicsXG4gICAgICBsYXN0X3VwZGF0ZWQ6ICcxNTEzNDMxMjUyJyxcbiAgICB9LFxuICBdLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZXIoXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IGN1cnJlbmN5QWN0aW9ucy5BY3Rpb25zLFxuKTogU3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBjdXJyZW5jeUFjdGlvbnMuTE9BRF9DVVJSRU5DWToge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNhc2UgY3VycmVuY3lBY3Rpb25zLkxPQURfQ1VSUkVOQ1lfU1VDQ0VTUzoge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICBkYXRhOiBhY3Rpb24ucGF5bG9hZCxcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgY3VycmVuY3lBY3Rpb25zLkxPQURfQ1VSUkVOQ1lfRkFJTDoge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgfTtcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZ2V0Q3VycmVuY2llcyA9IChzdGF0ZTogU3RhdGUpID0+IHN0YXRlLmRhdGE7XG5leHBvcnQgY29uc3QgZ2V0Q3VycmVuY2llc0xvYWRpbmcgPSAoc3RhdGU6IFN0YXRlKSA9PiBzdGF0ZS5sb2FkaW5nO1xuIl19